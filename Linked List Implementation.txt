#include <iostream>
using namespace std;

// Node structure for the linked list
struct Node {
    int row;
    int col;
    int value;
    Node* next;

    Node(int r, int c, int val) {
        row = r;
        col = c;
        value = val;
        next = nullptr;
    }
};

// Class to represent a sparse matrix using a linked list
class SparseMatrix {
private:
    Node* head;

public:
    SparseMatrix() {
        head = nullptr;
    }

    // Function to insert a non-zero element into the sparse matrix
    void insert(int r, int c, int val) {
        Node* newNode = new Node(r, c, val);

        if (head == nullptr) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    // Function to display the sparse matrix
    void display() {
        Node* temp = head;
        cout << "Row\tColumn\tValue" << endl;
        while (temp != nullptr) {
            cout << temp->row << "\t" << temp->col << "\t" << temp->value << endl;
            temp = temp->next;
        }
    }
};

int main() {
    SparseMatrix sm;

    // Inserting non-zero elements into the sparse matrix
    sm.insert(0, 2, 3);
    sm.insert(0, 4, 4);
    sm.insert(1, 2, 5);
    sm.insert(1, 3, 7);
    sm.insert(3, 1, 2);
    sm.insert(3, 2, 6);

    // Display the sparse matrix
    sm.display();

    return 0;
}
